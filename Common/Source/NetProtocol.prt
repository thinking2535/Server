include <Rso/Game/Protocol>
include <Rso/Physics/Protocol>
include <Rso/GameUtil/Protocol>

namespace bb
{
	using namespace rso
	using namespace net
	using namespace game
	using namespace physics
	using namespace gameutil

	typedef int64 TIndex
	typedef int32 TLevel
	typedef int32 THP
	typedef int8 TSlotNo
	typedef int32 TExp
	typedef int32 TRank
	typedef int8 TTeamCnt
	typedef uint8 TQuestSlotIndex
	typedef vector<wstring> TForbiddenWords

	const TVer c_Ver_Main 47

	const int32 c_FPS 60
	const int64 c_NetworkTickSync 500000
	const int64 c_NetworkTickBuffer c_NetworkTickSync+500000
	const float c_ContactOffset 0.0001f
	const float c_IgnoredGroundMaxDeltaVelocity 0.01f
	const float c_GroundAccRatio 4.0f
	const float c_AirAccRatio 2.0f

	const float c_ScreenWidth 3.55555f
	const float c_ScreenHeight 2.0f
	const float c_ScreenWidth_2 c_ScreenWidth*0.5f
	const float c_ScreenHeight_2 c_ScreenHeight*0.5f

	const int64 c_StaminaRegenDelayTick 10000000
	const float c_StaminaRegenSpeedInAir 10.0f
	const float c_StaminaRegenSpeedOnGround 10.0f
	const float c_FlapDeltaVelUp 0.19f
	const float c_FlapDeltaVelX 0.19f
	const float c_MaxVelDown 0.56f
	const float c_MaxVelDeadY 1.13784f
	const float c_Gravity -0.6465f
	const float c_MaxVelParachuteX 0.682704f
	const float c_MaxVelParachuteY 0.28446f
	const float c_GravityParachuteRatio 0.5f
	const float c_GravityDeadRatio 2.0f
	const float c_DieUpVel 0.7f

	const float c_PlayerWidth 0.1258713f
	const float c_PlayerWidth_2 c_PlayerWidth*0.5f
	const float c_PlayerHeight 0.150337f
	const float c_PlayerOffsetY c_PlayerHeight*0.5f
	const float c_BalloonWidth 0.2f
	const float c_BalloonHeight 0.27f
	const float c_BalloonOffsetY 0.5f
	const float c_BalloonLocalScale 0.5f
	const float c_ParachuteWidth 0.45f
	const float c_ParachuteHeight 0.25f
	const float c_ParachuteOffsetY 0.37f
	const float c_ParachuteLocalScale 0.5f

	const int32 c_MaxPlayer 6
	const int8 c_BalloonCountForRegen 2
	const int8 c_BalloonCountForPump 1
	const int8 c_PumpCountForBalloon 6
	const int64 c_BattleStartDelayMilliSec 2000
	const int64 c_ChainKillDelayTickCount 50000000
	const int64 c_RegenDelayTickCount 20000000

	const int32 c_QuestCnt_Max 5
	const int32 minNicknameLength 2
	const int32 maxNicknameLength 18

	const float arrowDodgePositionPrecision 1000.0f
	const float arrowDodgeItemScreenWidth c_ScreenWidth*0.9f
	const float arrowDodgeItemScreenHeight c_ScreenHeight*0.7f
	const float arrowDodgeHalfItemScreenWidth arrowDodgeItemScreenWidth*0.5f
	const float arrowDodgeHalfItemScreenHeight arrowDodgeItemScreenHeight*0.5f
	const float arrowDodgeMinDownVelocity 0.7f
	const float arrowDodgeMinHorizontalVelocity 0.3f
	const float arrowDodgeArrowCreateScreenGap 0.1f
	const float arrowDodgeArrowCreateAreaHalfWidth c_ScreenWidth*(0.5f+arrowDodgeArrowCreateScreenGap)
	const float arrowDodgeArrowCreateAreaHalfHeight c_ScreenHeight*(0.5f+arrowDodgeArrowCreateScreenGap)
	const float arrowDodgeArrowActiveScreenGap 0.2f
	const float arrowDodgeArrowActiveAreaHalfWidth c_ScreenWidth*(0.5f+arrowDodgeArrowActiveScreenGap)
	const float arrowDodgeArrowActiveTop c_ScreenHeight*(1.0f+arrowDodgeArrowActiveScreenGap)
	const float arrowDodgeArrowActiveBottom -(c_ScreenHeight*arrowDodgeArrowActiveScreenGap)
	const float arrowDodgeArrowActiveAreaHalfHeight c_ScreenHeight*(0.5f+arrowDodgeArrowActiveScreenGap)
	const int64 arrowDodgeFirstLeftArrowTick 300000000
	const int64 arrowDodgeFirstRightArrowTick 600000000
	const int64 arrowDodgeMaxArrowTick 900000000
	const int64 arrowDodgeArrowBaseVelocityTick 600000000
	const float arrowDodgeArrowBaseVelocity 0.1f

	const float flyAwayMaxY 1.7f
	const float flyAwayMinY 0.4f
	const int32 flyAwayMainLevelCount 5
	const int32 flyAwaySubLevelCount 3
	const float flyAwayItemSlopeFactor 0.7f
	const float flyAwayItemCoinXDistanceMultiplier 3.0f
	const float flyAwayLandTopY c_ScreenHeight_2*0.6f
	const float flyAwayLandBottomY -c_ScreenHeight_2*0.9f
	const float flyAwayLandHeightRange flyAwayLandTopY-flyAwayLandBottomY
	const int32 flyAwayLandDistanceBase 30
	const float flyAwayMinLandDistance 0.8f

	enum class EProtoNetCs
	{
		Chat
		FCMTokenSet
		FCMTokenUnset
		FCMCanPushAtNight
		ChangeLanguage
		Buy
		BuyChar
		BuyResource
		SelectChar

		BattleTouch
		BattlePush

		MultiBattleJoin
		MultiBattleOut
		MultiBattleIcon

		ArrowDodgeBattleJoin
		ArrowDodgeBattleEnd
		FlyAwayBattleJoin
		FlyAwayBattleEnd

		RankReward
		QuestReward
		QuestDailyCompleteReward
		ChangeNick
		CouponUse
		TutorialReward
		RankingRewardInfo
		RankingReward
		Max
		Null
	}
	enum class EProtoNetSc
	{
		Ret
		Msg
		Login
		Lobby
		Chat
		UserExp
		Resources
		SetPoint
		SetChar
		UnsetChar
		Buy
		BuyChar
		BuyResource

		BattleSync
		BattleDirect
		BattleFlap
		BattlePump

		MultiBattleJoin
		MultiBattleOut
		MultiBattleBegin
		MultiBattleStart
		MultiBattleEnd
		MultiBattleEndDraw
		MultiBattleEndInvalid
		MultiBattleIcon
		MultiBattleLink
		MultiBattleUnLink
		InvalidDisconnectInfo

		ArrowDodgeBattleJoin
		ArrowDodgeBattleBegin
		ArrowDodgeBattleStart
		ArrowDodgeBattleEnd
		FlyAwayBattleJoin
		FlyAwayBattleBegin
		FlyAwayBattleStart
		FlyAwayBattleEnd

		RankReward
		QuestGot
		QuestSet
		QuestDone
		QuestReward
		QuestDailyCompleteReward
		ChangeNick
		ChangeNickFail
		CouponUse
		CouponUseFail
		RankingRewardInfo
		RankingReward
		RankingRewardFail
		Max
	}

	enum class ERet
	{
		Ok
		InvalidTime
		UserDoesNotExist
		SameCanNotPushAtNight
		SameCode
		InvalidProtocol
		InvalidLanguage
		InvalidShopID
		InvalidGoodsID
		InvalidCharCode
		ReceiptCheckFail
		SPError

		NotBattleJoining
		AlreadyBattleJoining
		AlreadyInBattle
		AlreadyHave
		InvalidBattleType
		MatchInsertFail
		BattleBeginFail
		NotEnoughMoney
		NoMoreNewCharacter
		NickLengthUnderMin
		NickLengthOverMax
		CouponAlreadyUsed
		CouponInvalid

		RankingServerOffLine
		RankingNoReward
		RankingRewarded
		RankingRewardFail

		Max
		Null
	}
	enum class ELanguage : uint8
	{
		English
		Korean
		France
		Germany
		Spain
		Italia
		ChinaCH
		ChinaTW
		Japan
		Portugal
		Russia
		Nederland
		Turkey
		Finland
		Malaysia
		Thailand
		Indonesia
		Vietnam
		India
		Max
	}
	enum class EGrade : uint8
	{
		Normal
		Rare
		Epic
		Unique
		Max
	}

	struct SRankingUser
	{
		TUID UID
		u16string Nick
		int32 CharCode
		wstring CountryCode
		int32 Point
	}
	typedef list<SRankingUser> TRankingUsers
	struct SRankingUsers
	{
		TRankingUsers RankingUsers
	}

	typedef map<TUID,int32> TRankings
	enum class ERankingType
	{
		Multi
		Single
		Island
		Max
		Null
	}
	typedef array<int32,3> TRankingArray
	typedef array<int32,3> TRankingPointArray
	typedef array<TRankings,3> TRankingsArray
	typedef array<SRankingUsers,3> TRankingUsersArray

	struct SUserLoginOption
	{
		EOS OS
	}
	struct SUserCreateOption
	{
		SUserLoginOption LoginOption
		ELanguage Language
	}
	enum class EResource
	{
		Ticket
		Gold
		Dia00
		Dia01
		Dia02
		Dia03
		Max
		Null
	}

	typedef int32 TResource
	typedef array<TResource,6> TResources

	enum class EQuestType
	{
		IngameBalloonPopping
		IngameKill
		BlowBalloon
		PlayNormal
		PlayRare
		PlayEpic
		PlaySingle
		SinglePlayScoreGet
		PlayIsland
		IslandScoreGet
		SoloPlay
		SoloVictory
		Max
		Null=-1
	}

	struct SQuestSlotIndexCount
	{
		TQuestSlotIndex SlotIndex
		int32 Count
	}
	typedef list<SQuestSlotIndexCount> TDoneQuests

	struct SRetNetSc
	{
		ERet Ret
	}
	struct SMsgNetSc
	{
		wstring Msg
	}
	struct SResourceTypeData
	{
		EResource Type
		TResource Data
	}
	struct SUserCore
	{
		TResources Resources
		int8 Debug
		int32 SelectedCharCode
		int32 SinglePlayCount
		time_point SingleRefreshTime
		int32 IslandPlayCount
		time_point IslandRefreshTime
		time_point QuestDailyCompleteRefreshTime
		int32 ChangeNickFreeCount
	}

	struct SInvalidDisconnectInfo
	{
		time_point EndTime
		time_point MatchBlockEndTime
		int32 Count
	}
	struct SUserBase : SUserCore
	{
		TExp Exp
		bool CanPushAtNight
		double eloPoint
		int32 Point
		int32 PointBest
		int32 NextRewardRankIndex
		int32 WinCountSolo
		int32 LoseCountSolo
		int32 WinCountMulti
		int32 LoseCountMulti
		int32 BattlePointBest
		int32 SinglePointBest
		int32 IslandPointBest
		int32 IslandComboBest
		int32 KillTotal
		int32 ChainKillTotal
		int32 BlowBalloonTotal
		int32 QuestDailyCompleteCount
		bool TutorialReward
		int64 RankingRewardedCounter
		TNick NewNick
		SInvalidDisconnectInfo InvalidDisconnectInfo
	}
	struct SUserNet : SUserBase
	{
		wstring CountryCode
	}

	typedef set<int32> TChars

	struct SQuestBase
	{
		int32 Code
		int32 Count
		time_point CoolEndTime
	}
	typedef map<TQuestSlotIndex,SQuestBase> TQuestDBs

	struct SLoginNetSc
	{
		SUserNet User
		TChars Chars
		time_point ServerTime
		TQuestDBs Quests
	}
	struct SLobbyNetSc
	{
	}
	struct SUserExpNetSc
	{
		TExp Exp
	}
	struct SResourcesNetSc
	{
		TResources Resources
	}
	struct SSetPointNetSc
	{
		int32 Point
	}
	struct SSetCharNetSc
	{
		list<int32> CharCodes
	}
	struct SUnsetCharNetSc
	{
		list<int32> CharCodes
	}

	struct SChatNetCs
	{
		wstring Msg
	}
	struct SChatNetSc
	{
		wstring Msg
	}

	struct SFCMTokenSetNetCs
	{
		wstring Token
	}
	struct SFCMTokenUnsetNetCs
	{
	}
	struct SFCMCanPushAtNightNetCs
	{
		bool CanPush
	}
	struct SChangeLanguageNetCs
	{
		ELanguage Language
	}
	struct SBuyNetCs
	{
		int32 Code
	}

	struct SRewardInfo
	{
		TUID UID
		TResources ResourcesLeft
		list<int32> Chars
	}
	struct SBuyNetSc
	{
		TUID UID
		TResources ResourcesLeft
	}
	struct SBuyCharNetCs
	{
		int32 Code
	}
	struct SBuyCharNetSc
	{
		int32 Code
	}
	struct SBuyResourceNetCs
	{
		SResourceTypeData resourceTypeData
	}
	struct SBuyResourceNetSc
	{
		TResources ResourcesLeft
	}


	struct SSelectCharNetCs
	{
		int32 Code
	}

	struct SBattleType
	{
		TTeamCnt TeamCount
		int8 TeamMemberCount
	}

	struct SBattleSyncNetSc
	{
		int64 Tick
	}
	struct SBattleTouchNetCs
	{
		int8 Dir
	}
	struct SBattleDirectNetSc
	{
		int64 Tick
		int32 PlayerIndex
		int8 Dir
	}
	struct SBattlePushNetCs
	{
	}
	struct SBattleFlapNetSc
	{
		int64 Tick
		int32 PlayerIndex
	}
	struct SBattlePumpNetSc
	{
		int64 Tick
		int32 PlayerIndex
	}

	struct SMultiBattleJoinNetCs
	{
		SBattleType BattleType
	}
	struct SMultiBattleJoinNetSc
	{
	}
	struct SMultiBattleOutNetCs
	{
	}
	struct SMultiBattleOutNetSc
	{
	}
	struct SPumpInfo
	{
		int8 Count
		int8 CountTo
		float Scale
	}
	struct SParachuteInfo
	{
		float Scale
		float Velocity
	}
	struct SStaminaInfo
	{
		int64 LastUsedTick
		float Stamina
	}
	struct SBattlePlayer
	{
		TUID UID
		u16string Nick
		wstring CountryCode
		TTeamCnt TeamIndex
		int32 CharCode
	}
	struct SCharacter
	{
		bool IsGround
		int8 Dir
		int8 BalloonCount
		SPumpInfo PumpInfo
		SParachuteInfo ParachuteInfo
		SStaminaInfo StaminaInfo
		int8 Face
		int64 InvulnerableEndTick
		int32 ChainKillCount
		int64 LastKillTick
		int64 RegenTick
	}
	struct SCharacterNet : SCharacter
	{
		SPoint Pos
		SPoint Vel
	}
	struct SBattle
	{
		SBattleType BattleType
		int32 MapIndex
	}
	struct SBattleRecord
	{
		int32 TotalKillCount
		int32 TotalBalloonHitCount
	}
	struct BattleInfo
	{
		int32 Point
	}
	struct SMultiBattleInfo : BattleInfo
	{
	}
	struct SMultiBattleBeginNetSc : SBattle
	{
		vector<SBattlePlayer> Players
		map<int32,time_point> DisconnectEndTimes
		vector<SMultiBattleInfo> BattleInfos
		SBattleRecord Record
		vector<SCharacterNet> Characters
		int64 EndTick
		int64 Tick
		vector<SStructMovePosition> StructMovePositions
	}
	struct SMultiBattleStartNetSc
	{
		int64 EndTick
	}
	struct BattleEndInfo
	{
		double addedEloPoint
		int32 battlePoint
		TResources addedResources
	}

	struct STeamBattleInfo
	{
		int32 Ranking
		int32 Point
		list<int32> playerIndices
	}
	struct SMultiBattleEndNet
	{
		SInvalidDisconnectInfo InvalidDisconnectInfo
	}
	struct SMultiBattleEndNetSc : SMultiBattleEndNet
	{
		int32 myTeamRanking
		TResources ResourcesLeft
		double eloPoint
		int32 point
		int32 battlePoint
		TDoneQuests DoneQuests
	}
	struct SMultiBattleEndDrawNetSc : SMultiBattleEndNet
	{
		TResources ResourcesLeft
		TDoneQuests DoneQuests
	}
	struct SMultiBattleEndInvalidNetSc : SMultiBattleEndNet
	{
	}
	struct SMultiBattleIconNetCs
	{
		int32 Code
	}
	struct SMultiBattleIconNetSc
	{
		int32 PlayerIndex
		int32 Code
	}
	struct SMultiBattleLinkNetSc
	{
		int64 Tick
		int32 PlayerIndex
	}
	struct SMultiBattleUnLinkNetSc
	{
		int64 Tick
		int32 PlayerIndex
		time_point DisconnectEndTime
	}

	struct SInvalidDisconnectInfoNetSc : SInvalidDisconnectInfo
	{
	}

	struct SingleBattleStartNetSc
	{
	}
	struct SingleBattleEndNetSc
	{
		int64 Tick
		TResources ResourcesLeft
		TDoneQuests DoneQuests
	}

	struct SArrowDodgeBattleJoinNetCs
	{
	}
	struct SArrowDodgeBattleJoinNetSc
	{
		TResource GoldCost
		int32 PlayCount
		time_point RefreshTime
		TDoneQuests DoneQuests
	}
	struct SArrow
	{
		SPoint LocalPosition
		SPoint Velocity
	}

	enum class EArrowDodgeItemType
	{
		Coin
		GoldBar
		Shield
		Stamina
		Max
		Null
	}

	struct SArrowDodgeItem
	{
		SPoint LocalPosition
		EArrowDodgeItemType ItemType
	}
	struct SingleBattleInfo : BattleInfo
	{
		TResource Gold
	}
	struct SArrowDodgeBattleInfo : SingleBattleInfo
	{
	}
	struct SArrowDodgeBattleBuf
	{
		bool Enabled
		int64 EndTick
	}
	struct SArrowDodgeBattleBufs
	{
		SArrowDodgeBattleBuf Shield
		SArrowDodgeBattleBuf Stamina
	}
	struct SingleBattleBeginNetSc
	{
		SBattlePlayer Player
		SCharacterNet Character
		int64 Tick
		uint32 RandomSeed
		bool Started
	}
	struct SArrowDodgeBattleBeginNetSc : SingleBattleBeginNetSc
	{
		SArrowDodgeBattleInfo BattleInfo
		SArrowDodgeBattleBufs Bufs
		int64 NextDownArrowTick
		int64 NextLeftArrowTick
		int64 NextRightArrowTick
		int64 NextItemTick
		vector<SArrow> Arrows
		vector<SArrowDodgeItem> Items
	}
	struct SArrowDodgeBattleStartNetSc : SingleBattleStartNetSc
	{
	}
	struct SArrowDodgeBattleEndNetCs
	{
	}
	struct SArrowDodgeBattleEndNetSc : SingleBattleEndNetSc
	{
	}

	struct FlyAwayPathMakerState
	{
		int32 currentLevel
		int32 levelDirection
		int32 destMainLevel
		int32 currentCount
		int32 destCount
	}
	struct SFlyAwayBattleJoinNetCs
	{
	}
	struct SFlyAwayBattleJoinNetSc
	{
		TResource GoldCost
		int32 PlayCount
		time_point RefreshTime
		TDoneQuests DoneQuests
	}
	enum class EFlyAwayLandState
	{
		Normal
		Shaking
		Falling
	}
	struct SFlyAwayLand
	{
		SPoint LocalPosition
		int32 Number
		int32 Index
		EFlyAwayLandState State
		int64 NextActionTick
	}

	enum class EFlyAwayItemType
	{
		Coin
		GoldBar
		Apple
		Meat
		Chicken
		Max
		Null
	}

	struct SFlyAwayItem
	{
		SPoint LocalPosition
		EFlyAwayItemType ItemType
	}
	struct SFlyAwayBattleInfo : SingleBattleInfo
	{
		int32 PerfectCombo
	}
	struct SFlyAwayBattleBeginNetSc : SingleBattleBeginNetSc
	{
		FlyAwayPathMakerState pathMakerState
		SFlyAwayBattleInfo BattleInfo
		int32 LandCounter
		SPoint LastLandPosition
		vector<SFlyAwayLand> Lands
		vector<SFlyAwayItem> Items
	}
	struct SFlyAwayBattleStartNetSc : SingleBattleStartNetSc
	{
	}
	struct SFlyAwayBattleEndNetCs
	{
	}
	struct SFlyAwayBattleEndNetSc : SingleBattleEndNetSc
	{
	}

	struct SRanking
	{
		TRankingUsersArray RankingUsersArray
	}

	enum class EProtoRankingNetCs
	{
		RequestRanking
		Max
	}
	enum class EProtoRankingNetSc
	{
		RequestRanking
		Max
	}

	struct SRankRewardNetCs
	{
	}
	struct SRankRewardNetSc : SRewardInfo
	{
		int32 NextRewardRankIndex
	}
	struct SQuestSlotIndexCode
	{
		TQuestSlotIndex SlotIndex
		int32 Code
	}
	typedef list<SQuestSlotIndexCode> TQuestSlotIndexCodes
	struct SQuestGotNetSc
	{
		TQuestSlotIndexCodes Quests
	}
	struct SQuestSetNetSc
	{
		TQuestSlotIndex SlotIndex
		int32 NewQuestCode
	}
	struct SQuestDoneNetSc
	{
		TQuestSlotIndex SlotIndex
		int32 Count
	}
	struct SQuestRewardNetCs
	{
		TQuestSlotIndex SlotIndex
	}
	struct SQuestRewardNetSc : SRewardInfo
	{
		TQuestSlotIndex SlotIndex
		int32 newCode
		time_point CoolEndTime
		int32 DailyCompleteCount
		time_point DailyCompleteRefreshTime
	}
	struct SQuestDailyCompleteRewardNetCs
	{
	}
	struct SQuestDailyCompleteRewardNetSc : SRewardInfo
	{
		time_point RefreshTime
	}

	struct SChangeNickNetCs
	{
		u16string Nick
	}
	struct SChangeNickNetSc
	{
		u16string Nick
	}
	struct SChangeNickFailNetSc
	{
		EGameRet GameRet
		wstring ForbiddenWord
	}

	struct SNickPoint
	{
		int32 Point
	}
	struct SCheckIDNetSc
	{
		list<SNickPoint> Datas
	}

	struct SCouponUseNetCs
	{
		wstring Key
	}
	struct SCouponUseNetSc : SRewardInfo
	{
		TResources ResourcesAdded
	}
	struct SCouponUseFailNetSc
	{
		ERet Ret
	}

	struct STutorialRewardNetCs
	{
	}

	struct SRankingRewardInfoNetCs
	{
	}
	struct SRankingRewardInfoNetSc
	{
		int64 Counter
		TRankingArray RankingArray
	}
	struct SRankingRewardNetCs
	{
	}
	struct SRankingRewardNetSc : SRewardInfo
	{
		int64 Counter
		TRankingArray myRankingArray
	}
	struct SRankingRewardFailNetSc
	{
		ERet Ret
	}
}
